
import React, { useState, useEffect } from 'react';
import { Layout, Menu, Typography, Card, Row, Col, Statistic } from 'antd';
import {
  DashboardOutlined,
  ShoppingOutlined,
  UserOutlined,
  ShoppingCartOutlined,
  TagOutlined,
  MenuFoldOutlined,
  MenuUnfoldOutlined,
} from '@ant-design/icons';
import { Link, useLocation } from 'react-router-dom';
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
  ResponsiveContainer,
} from 'recharts';
import { useDispatch, useSelector } from 'react-redux';

const { Header, Sider, Content } = Layout;
const { Title } = Typography;

export const AdminDashboard = () => {
  const [collapsed, setCollapsed] = useState(false);
  const [statistics, setStatistics] = useState({
    users: 0,
    products: 0,
    categories: 0,
    brands: 0,
    revenue: 0,
  });

  const location = useLocation();
  const dispatch = useDispatch();

  // Sample data for the revenue chart
  const revenueData = [
    { month: 'Jan', revenue: 3000 },
    { month: 'Feb', revenue: 4500 },
    { month: 'Mar', revenue: 3800 },
    { month: 'Apr', revenue: 5200 },
    { month: 'May', revenue: 4800 },
    { month: 'Jun', revenue: 6000 },
  ];

  useEffect(() => {
    // Here you would fetch the actual statistics from your API
    // For now using dummy data
    setStatistics({
      users: 150,
      products: 300,
      categories: 12,
      brands: 25,
      revenue: 25000,
    });
  }, []);

  const menuItems = [
    {
      key: 'dashboard',
      icon: <DashboardOutlined />,
      label: <Link to="/admin">Dashboard</Link>,
    },
    {
      key: 'products',
      icon: <ShoppingOutlined />,
      label: <Link to="/admin/products">Products</Link>,
    },
    {
      key: 'users',
      icon: <UserOutlined />,
      label: <Link to="/admin/users">Users</Link>,
    },
    {
      key: 'orders',
      icon: <ShoppingCartOutlined />,
      label: <Link to="/admin/orders">Orders</Link>,
    },
    {
      key: 'brands',
      icon: <TagOutlined />,
      label: <Link to="/admin/brands">Brands</Link>,
    },
  ];

  return (
    <Layout style={{ minHeight: '100vh' }}>
      <Sider 
        trigger={null} 
        collapsible 
        collapsed={collapsed}
        theme="light"
        style={{
          boxShadow: '2px 0 8px 0 rgba(29,35,41,.05)',
        }}
      >
        <div style={{ height: 32, margin: 16, background: 'rgba(0, 0, 0, 0.2)' }}>
          {/* Logo placeholder */}
        </div>
        <Menu
          theme="light"
          mode="inline"
          defaultSelectedKeys={['dashboard']}
          selectedKeys={[location.pathname.split('/')[2] || 'dashboard']}
          items={menuItems}
        />
      </Sider>
      <Layout>
        <Header 
          style={{ 
            padding: 0, 
            background: '#fff',
            boxShadow: '0 2px 8px rgba(0, 0, 0, 0.06)',
          }}
        >
          {React.createElement(
            collapsed ? MenuUnfoldOutlined : MenuFoldOutlined,
            {
              className: 'trigger',
              style: {
                padding: '0 24px',
                fontSize: '18px',
                cursor: 'pointer',
                transition: 'color 0.3s',
              },
              onClick: () => setCollapsed(!collapsed),
            }
          )}
        </Header>
        <Content style={{ margin: '24px 16px', padding: 24, background: '#fff' }}>
          <Title level={2} style={{ marginBottom: 24 }}>Dashboard Overview</Title>
          
          {/* Statistics Cards */}
          <Row gutter={[16, 16]}>
            <Col xs={24} sm={12} lg={6}>
              <Card>
                <Statistic
                  title="Total Users"
                  value={statistics.users}
                  prefix={<UserOutlined />}
                />
              </Card>
            </Col>
            <Col xs={24} sm={12} lg={6}>
              <Card>
                <Statistic
                  title="Total Products"
                  value={statistics.products}
                  prefix={<ShoppingOutlined />}
                />
              </Card>
            </Col>
            <Col xs={24} sm={12} lg={6}>
              <Card>
                <Statistic
                  title="Categories"
                  value={statistics.categories}
                  prefix={<TagOutlined />}
                />
              </Card>
            </Col>
            <Col xs={24} sm={12} lg={6}>
              <Card>
                <Statistic
                  title="Brands"
                  value={statistics.brands}
                  prefix={<TagOutlined />}
                />
              </Card>
            </Col>
          </Row>

          {/* Revenue Chart */}
          <Card style={{ marginTop: 24 }}>
            <Title level={4}>Revenue Overview</Title>
            <div style={{ width: '100%', height: 300 }}>
              <ResponsiveContainer>
                <BarChart
                  data={revenueData}
                  margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                >
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="month" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Bar dataKey="revenue" fill="#1890ff" name="Revenue" />
                </BarChart>
              </ResponsiveContainer>
            </div>
          </Card>
        </Content>
      </Layout>
    </Layout>
  );
                                style={{ width: '100%' }}
                                onChange={handleBrandFilters}
                            >
                                <div style={{ display: 'flex', flexDirection: 'column', gap: '0.5rem' }}>
                                    {brands.map(brand => (
                                        <Checkbox key={brand._id} value={brand._id}>
                                            {brand.name}
                                        </Checkbox>
                                    ))}
                                </div>
                            </Checkbox.Group>
                        </Panel>
                        <Panel header="Category" key="2">
                            <Checkbox.Group
                                style={{ width: '100%' }}
                                onChange={handleCategoryFilters}
                            >
                                <div style={{ display: 'flex', flexDirection: 'column', gap: '0.5rem' }}>
                                    {categories.map(category => (
                                        <Checkbox key={category._id} value={category._id}>
                                            {category.name}
                                        </Checkbox>
                                    ))}
                                </div>
                            </Checkbox.Group>
                        </Panel>
                    </Collapse>
                </div>
            </Drawer>

            <div style={{ display: 'flex', flexDirection: 'column', gap: '1.5rem', marginTop: screens.md ? '2.5rem' : '1rem', marginBottom: '3rem' }}>
                <div style={{ display: 'flex', justifyContent: 'flex-end', paddingRight: '2rem' }}>
                    <Select
                        placeholder="Sort"
                        style={{ width: '12rem' }}
                        onChange={(value) => setSort(value || null)}
                        value={sort}
                        allowClear
                    >
                        {
                            sortOptions.map((option) => (
                                <Option key={option.name} value={option.name}>{option.name}</Option>
                            ))
                        }
                    </Select>
                </div>

                <div style={{ display: 'flex', flexWrap: 'wrap', gap: 16, justifyContent: 'center' }}>
                    {
                        products.map((product) => (
                            <div key={product._id} style={{ display: 'flex', flexDirection: 'column', gap: 8 }}>
                                <div style={{ opacity: product.isDeleted ? 0.7 : 1 }}>
                                    <ProductCard
                                        id={product._id}
                                        title={product.title}
                                        thumbnail={product.thumbnail}
                                        brand={product.brand?.name}
                                        price={product.price}
                                        isAdminCard={true}
                                    />
                                </div>
                                <div style={{ display: 'flex', justifyContent: 'flex-end', gap: screens.xs ? 8 : 16, padding: '0 1rem' }}>
                                    <Link to={`/admin/product-update/${product._id}`}>
                                        <Button
                                            type="primary"
                                            onClick={(e) => e.stopPropagation()}
                                        >
                                            Update
                                        </Button>
                                    </Link>
                                    {
                                        product.isDeleted === true ? (
                                            <Button danger onClick={() => handleProductUnDelete(product._id)}>
                                                Un-delete
                                            </Button>
                                        ) : (
                                            <Button danger onClick={() => handleProductDelete(product._id)}>
                                                Delete
                                            </Button>
                                        )
                                    }
                                </div>
                            </div>
                        ))
                    }
                </div>

                <div style={{ display: 'flex', flexDirection: 'column', alignItems: screens.xs ? 'center' : 'flex-end', paddingRight: screens.xs ? 0 : '2.5rem', gap: '0.5rem' }}>
                    <Pagination
                        size={screens.xs ? 'default' : 'large'}
                        current={page}
                        onChange={(page) => setPage(page)}
                        total={totalResults}
                        pageSize={ITEMS_PER_PAGE}
                        showSizeChanger={false}
                    />
                    <Text style={{ textAlign: 'center' }}>
                        Showing {(page - 1) * ITEMS_PER_PAGE + 1} to {page * ITEMS_PER_PAGE > totalResults ? totalResults : page * ITEMS_PER_PAGE} of {totalResults} results
                    </Text>
                </div>

            </div>
        </>
    )
}

